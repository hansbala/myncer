/* tslint:disable */
/* eslint-disable */
/**
 * Myncer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MusicSource } from './MusicSource';
import {
    MusicSourceFromJSON,
    MusicSourceFromJSONTyped,
    MusicSourceToJSON,
    MusicSourceToJSONTyped,
} from './MusicSource';
import type { SyncVariant } from './SyncVariant';
import {
    SyncVariantFromJSON,
    SyncVariantFromJSONTyped,
    SyncVariantToJSON,
    SyncVariantToJSONTyped,
} from './SyncVariant';

/**
 * Representative of merging sources into a master source and writing to all.
 * @export
 * @interface MergeSync
 */
export interface MergeSync {
    /**
     * 
     * @type {SyncVariant}
     * @memberof MergeSync
     */
    syncVariant: SyncVariant;
    /**
     * All sources that will be merged into one and written back to sources.
     * @type {Array<MusicSource>}
     * @memberof MergeSync
     */
    sources: Array<MusicSource>;
}



/**
 * Check if a given object implements the MergeSync interface.
 */
export function instanceOfMergeSync(value: object): value is MergeSync {
    if (!('syncVariant' in value) || value['syncVariant'] === undefined) return false;
    if (!('sources' in value) || value['sources'] === undefined) return false;
    return true;
}

export function MergeSyncFromJSON(json: any): MergeSync {
    return MergeSyncFromJSONTyped(json, false);
}

export function MergeSyncFromJSONTyped(json: any, ignoreDiscriminator: boolean): MergeSync {
    if (json == null) {
        return json;
    }
    return {
        
        'syncVariant': SyncVariantFromJSON(json['syncVariant']),
        'sources': ((json['sources'] as Array<any>).map(MusicSourceFromJSON)),
    };
}

export function MergeSyncToJSON(json: any): MergeSync {
    return MergeSyncToJSONTyped(json, false);
}

export function MergeSyncToJSONTyped(value?: MergeSync | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'syncVariant': SyncVariantToJSON(value['syncVariant']),
        'sources': ((value['sources'] as Array<any>).map(MusicSourceToJSON)),
    };
}

