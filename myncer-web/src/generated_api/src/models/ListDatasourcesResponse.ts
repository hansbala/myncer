/* tslint:disable */
/* eslint-disable */
/**
 * Myncer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Datasource } from './Datasource';
import {
    DatasourceFromJSON,
    DatasourceFromJSONTyped,
    DatasourceToJSON,
    DatasourceToJSONTyped,
} from './Datasource';

/**
 * 
 * @export
 * @interface ListDatasourcesResponse
 */
export interface ListDatasourcesResponse {
    /**
     * 
     * @type {Array<Datasource>}
     * @memberof ListDatasourcesResponse
     */
    connectedDatasources?: Array<Datasource>;
}

/**
 * Check if a given object implements the ListDatasourcesResponse interface.
 */
export function instanceOfListDatasourcesResponse(value: object): value is ListDatasourcesResponse {
    return true;
}

export function ListDatasourcesResponseFromJSON(json: any): ListDatasourcesResponse {
    return ListDatasourcesResponseFromJSONTyped(json, false);
}

export function ListDatasourcesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListDatasourcesResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'connectedDatasources': json['connectedDatasources'] == null ? undefined : ((json['connectedDatasources'] as Array<any>).map(DatasourceFromJSON)),
    };
}

export function ListDatasourcesResponseToJSON(json: any): ListDatasourcesResponse {
    return ListDatasourcesResponseToJSONTyped(json, false);
}

export function ListDatasourcesResponseToJSONTyped(value?: ListDatasourcesResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'connectedDatasources': value['connectedDatasources'] == null ? undefined : ((value['connectedDatasources'] as Array<any>).map(DatasourceToJSON)),
    };
}

