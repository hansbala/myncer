/* tslint:disable */
/* eslint-disable */
/**
 * Myncer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { MergeSync } from './MergeSync';
import {
    instanceOfMergeSync,
    MergeSyncFromJSON,
    MergeSyncFromJSONTyped,
    MergeSyncToJSON,
} from './MergeSync';
import type { OneWaySync } from './OneWaySync';
import {
    instanceOfOneWaySync,
    OneWaySyncFromJSON,
    OneWaySyncFromJSONTyped,
    OneWaySyncToJSON,
} from './OneWaySync';

/**
 * @type SyncSyncData
 * 
 * @export
 */
export type SyncSyncData = { syncVariant: 'MERGE' } & MergeSync | { syncVariant: 'ONE_WAY' } & OneWaySync;

export function SyncSyncDataFromJSON(json: any): SyncSyncData {
    return SyncSyncDataFromJSONTyped(json, false);
}

export function SyncSyncDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SyncSyncData {
    if (json == null) {
        return json;
    }
    switch (json['syncVariant']) {
        case 'MERGE':
            return Object.assign({}, MergeSyncFromJSONTyped(json, true), { syncVariant: 'MERGE' } as const);
        case 'ONE_WAY':
            return Object.assign({}, OneWaySyncFromJSONTyped(json, true), { syncVariant: 'ONE_WAY' } as const);
        default:
            throw new Error(`No variant of SyncSyncData exists with 'syncVariant=${json['syncVariant']}'`);
    }
}

export function SyncSyncDataToJSON(json: any): any {
    return SyncSyncDataToJSONTyped(json, false);
}

export function SyncSyncDataToJSONTyped(value?: SyncSyncData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['syncVariant']) {
        case 'MERGE':
            return Object.assign({}, MergeSyncToJSON(value), { syncVariant: 'MERGE' } as const);
        case 'ONE_WAY':
            return Object.assign({}, OneWaySyncToJSON(value), { syncVariant: 'ONE_WAY' } as const);
        default:
            throw new Error(`No variant of SyncSyncData exists with 'syncVariant=${value['syncVariant']}'`);
    }

}

