/* tslint:disable */
/* eslint-disable */
/**
 * Myncer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSyncRequest,
  CreateUserRequest,
  CreateUserResponse,
  Datasource,
  EditUserRequest,
  ListDatasourcesResponse,
  ListSyncsResponse,
  ListUsersResponse,
  OAuthExchangeRequest,
  User,
  UserLoginRequest,
} from '../models/index';
import {
    CreateSyncRequestFromJSON,
    CreateSyncRequestToJSON,
    CreateUserRequestFromJSON,
    CreateUserRequestToJSON,
    CreateUserResponseFromJSON,
    CreateUserResponseToJSON,
    DatasourceFromJSON,
    DatasourceToJSON,
    EditUserRequestFromJSON,
    EditUserRequestToJSON,
    ListDatasourcesResponseFromJSON,
    ListDatasourcesResponseToJSON,
    ListSyncsResponseFromJSON,
    ListSyncsResponseToJSON,
    ListUsersResponseFromJSON,
    ListUsersResponseToJSON,
    OAuthExchangeRequestFromJSON,
    OAuthExchangeRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserLoginRequestFromJSON,
    UserLoginRequestToJSON,
} from '../models/index';

export interface CreateSyncOperationRequest {
    createSyncRequest: CreateSyncRequest;
}

export interface CreateUserOperationRequest {
    createUserRequest: CreateUserRequest;
}

export interface EditUserOperationRequest {
    editUserRequest?: EditUserRequest;
}

export interface ExchangeOAuthCodeRequest {
    datasource: Datasource;
    oAuthExchangeRequest: OAuthExchangeRequest;
}

export interface LoginUserRequest {
    userLoginRequest?: UserLoginRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Creates a sync job for the current user between a (datasource, playlist tuple). 
     * Create a sync for the current user between two (datasource, playlist) tuples.
     */
    async createSyncRaw(requestParameters: CreateSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createSyncRequest'] == null) {
            throw new runtime.RequiredError(
                'createSyncRequest',
                'Required parameter "createSyncRequest" was null or undefined when calling createSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/syncs/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSyncRequestToJSON(requestParameters['createSyncRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a sync job for the current user between a (datasource, playlist tuple). 
     * Create a sync for the current user between two (datasource, playlist) tuples.
     */
    async createSync(requestParameters: CreateSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSyncRaw(requestParameters, initOverrides);
    }

    /**
     * Create a user
     */
    async createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserResponse>> {
        if (requestParameters['createUserRequest'] == null) {
            throw new runtime.RequiredError(
                'createUserRequest',
                'Required parameter "createUserRequest" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters['createUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserResponseFromJSON(jsonValue));
    }

    /**
     * Create a user
     */
    async createUser(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserResponse> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edits the current user.
     */
    async editUserRaw(requestParameters: EditUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/edit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditUserRequestToJSON(requestParameters['editUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Edits the current user.
     */
    async editUser(requestParameters: EditUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.editUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchanges an OAuth2 authorization code from a supported datasource for access and refresh tokens. 
     * Exchange authorization code for access and refresh tokens
     */
    async exchangeOAuthCodeRaw(requestParameters: ExchangeOAuthCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['datasource'] == null) {
            throw new runtime.RequiredError(
                'datasource',
                'Required parameter "datasource" was null or undefined when calling exchangeOAuthCode().'
            );
        }

        if (requestParameters['oAuthExchangeRequest'] == null) {
            throw new runtime.RequiredError(
                'oAuthExchangeRequest',
                'Required parameter "oAuthExchangeRequest" was null or undefined when calling exchangeOAuthCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{datasource}/exchange`.replace(`{${"datasource"}}`, encodeURIComponent(String(requestParameters['datasource']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthExchangeRequestToJSON(requestParameters['oAuthExchangeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Exchanges an OAuth2 authorization code from a supported datasource for access and refresh tokens. 
     * Exchange authorization code for access and refresh tokens
     */
    async exchangeOAuthCode(requestParameters: ExchangeOAuthCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exchangeOAuthCodeRaw(requestParameters, initOverrides);
    }

    /**
     * Get the potentially authenticated user\'s details.
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get the potentially authenticated user\'s details.
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get list of connected datasources of the current user.
     * Get list of connected datasources
     */
    async listConnectedDatasourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListDatasourcesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/datasources/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDatasourcesResponseFromJSON(jsonValue));
    }

    /**
     * Get list of connected datasources of the current user.
     * Get list of connected datasources
     */
    async listConnectedDatasources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListDatasourcesResponse> {
        const response = await this.listConnectedDatasourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all syncs for the current user.
     * List all syncs.
     */
    async listSyncsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSyncsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/syncs/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSyncsResponseFromJSON(jsonValue));
    }

    /**
     * List all syncs for the current user.
     * List all syncs.
     */
    async listSyncs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSyncsResponse> {
        const response = await this.listSyncsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all users.
     */
    async listUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUsersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUsersResponseFromJSON(jsonValue));
    }

    /**
     * List all users.
     */
    async listUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUsersResponse> {
        const response = await this.listUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login the user based on credentials provided in the request.
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginRequestToJSON(requestParameters['userLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login the user based on credentials provided in the request.
     */
    async loginUser(requestParameters: LoginUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginUserRaw(requestParameters, initOverrides);
    }

    /**
     * Log out the currently authenticated user by clearing the session cookie.
     */
    async logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log out the currently authenticated user by clearing the session cookie.
     */
    async logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutUserRaw(initOverrides);
    }

}
