// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file myncer/config.proto (package myncer, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file myncer/config.proto.
 */
export const file_myncer_config: GenFile = /*@__PURE__*/
  fileDesc("ChNteW5jZXIvY29uZmlnLnByb3RvEgZteW5jZXIi+wEKBkNvbmZpZxIvCg9kYXRhYmFzZV9jb25maWcYASABKAsyFi5teW5jZXIuRGF0YWJhc2VDb25maWcSJwoLc2VydmVyX21vZGUYAiABKA4yEi5teW5jZXIuU2VydmVyTW9kZRISCgpqd3Rfc2VjcmV0GAMgASgJEi0KDnNwb3RpZnlfY29uZmlnGAQgASgLMhUubXluY2VyLlNwb3RpZnlDb25maWcSLQoOeW91dHViZV9jb25maWcYBSABKAsyFS5teW5jZXIuWW91dHViZUNvbmZpZxIlCgpsbG1fY29uZmlnGAYgASgLMhEubXluY2VyLkxsbUNvbmZpZyIpCgdDb25maWdzEh4KBmNvbmZpZxgBIAMoCzIOLm15bmNlci5Db25maWciJgoORGF0YWJhc2VDb25maWcSFAoMZGF0YWJhc2VfdXJsGAEgASgJIk8KDVNwb3RpZnlDb25maWcSEQoJY2xpZW50X2lkGAEgASgJEhUKDWNsaWVudF9zZWNyZXQYAiABKAkSFAoMcmVkaXJlY3RfdXJpGAMgASgJIk8KDVlvdXR1YmVDb25maWcSEQoJY2xpZW50X2lkGAEgASgJEhUKDWNsaWVudF9zZWNyZXQYAiABKAkSFAoMcmVkaXJlY3RfdXJpGAMgASgJIqcBCglMbG1Db25maWcSDwoHZW5hYmxlZBgBIAEoCBIvChJwcmVmZXJyZWRfcHJvdmlkZXIYAiABKA4yEy5teW5jZXIuTGxtUHJvdmlkZXISKwoNZ2VtaW5pX2NvbmZpZxgDIAEoCzIULm15bmNlci5HZW1pbmlDb25maWcSKwoNb3BlbmFpX2NvbmZpZxgEIAEoCzIULm15bmNlci5PcGVuQUlDb25maWciHwoMR2VtaW5pQ29uZmlnEg8KB2FwaV9rZXkYASABKAkiHwoMT3BlbkFJQ29uZmlnEg8KB2FwaV9rZXkYAiABKAkqMAoKU2VydmVyTW9kZRIPCgtVTlNQRUNJRklFRBAAEggKBFBST0QQARIHCgNERVYQAipDCgtMbG1Qcm92aWRlchIcChhMTE1fUFJPVklERVJfVU5TUEVDSUZJRUQQABIKCgZHRU1JTkkQARIKCgZPUEVOQUkQAkIzWjFnaXRodWIuY29tL2hhbnNiYWxhL215bmNlci9wcm90by9teW5jZXI7bXluY2VyX3BiYgZwcm90bzM");

/**
 * @generated from message myncer.Config
 */
export type Config = Message<"myncer.Config"> & {
  /**
   * All database specific config lives in here.
   *
   * @generated from field: myncer.DatabaseConfig database_config = 1;
   */
  databaseConfig?: DatabaseConfig;

  /**
   * What mode the server is configured to run in.
   *
   * @generated from field: myncer.ServerMode server_mode = 2;
   */
  serverMode: ServerMode;

  /**
   * Can generate using `openssl rand -hex 32`.
   *
   * @generated from field: string jwt_secret = 3;
   */
  jwtSecret: string;

  /**
   * @generated from field: myncer.SpotifyConfig spotify_config = 4;
   */
  spotifyConfig?: SpotifyConfig;

  /**
   * @generated from field: myncer.YoutubeConfig youtube_config = 5;
   */
  youtubeConfig?: YoutubeConfig;

  /**
   * @generated from field: myncer.LlmConfig llm_config = 6;
   */
  llmConfig?: LlmConfig;
};

/**
 * Describes the message myncer.Config.
 * Use `create(ConfigSchema)` to create a new message.
 */
export const ConfigSchema: GenMessage<Config> = /*@__PURE__*/
  messageDesc(file_myncer_config, 0);

/**
 * @generated from message myncer.Configs
 */
export type Configs = Message<"myncer.Configs"> & {
  /**
   * @generated from field: repeated myncer.Config config = 1;
   */
  config: Config[];
};

/**
 * Describes the message myncer.Configs.
 * Use `create(ConfigsSchema)` to create a new message.
 */
export const ConfigsSchema: GenMessage<Configs> = /*@__PURE__*/
  messageDesc(file_myncer_config, 1);

/**
 * @generated from message myncer.DatabaseConfig
 */
export type DatabaseConfig = Message<"myncer.DatabaseConfig"> & {
  /**
   * @generated from field: string database_url = 1;
   */
  databaseUrl: string;
};

/**
 * Describes the message myncer.DatabaseConfig.
 * Use `create(DatabaseConfigSchema)` to create a new message.
 */
export const DatabaseConfigSchema: GenMessage<DatabaseConfig> = /*@__PURE__*/
  messageDesc(file_myncer_config, 2);

/**
 * @generated from message myncer.SpotifyConfig
 */
export type SpotifyConfig = Message<"myncer.SpotifyConfig"> & {
  /**
   * Can be obtained from https://console.developers.google.com/apis/credentials.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret: string;

  /**
   * @generated from field: string redirect_uri = 3;
   */
  redirectUri: string;
};

/**
 * Describes the message myncer.SpotifyConfig.
 * Use `create(SpotifyConfigSchema)` to create a new message.
 */
export const SpotifyConfigSchema: GenMessage<SpotifyConfig> = /*@__PURE__*/
  messageDesc(file_myncer_config, 3);

/**
 * @generated from message myncer.YoutubeConfig
 */
export type YoutubeConfig = Message<"myncer.YoutubeConfig"> & {
  /**
   * Can be obtained from https://console.developers.google.com/apis/credentials.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret: string;

  /**
   * @generated from field: string redirect_uri = 3;
   */
  redirectUri: string;
};

/**
 * Describes the message myncer.YoutubeConfig.
 * Use `create(YoutubeConfigSchema)` to create a new message.
 */
export const YoutubeConfigSchema: GenMessage<YoutubeConfig> = /*@__PURE__*/
  messageDesc(file_myncer_config, 4);

/**
 * @generated from message myncer.LlmConfig
 */
export type LlmConfig = Message<"myncer.LlmConfig"> & {
  /**
   * Whether LLM has been enabled or not.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * The preferred provider to use. We can potentially connect multiple LLMs.
   *
   * @generated from field: myncer.LlmProvider preferred_provider = 2;
   */
  preferredProvider: LlmProvider;

  /**
   * The LlmConfig holds configurations across all providers.
   *
   * @generated from field: myncer.GeminiConfig gemini_config = 3;
   */
  geminiConfig?: GeminiConfig;

  /**
   * @generated from field: myncer.OpenAIConfig openai_config = 4;
   */
  openaiConfig?: OpenAIConfig;
};

/**
 * Describes the message myncer.LlmConfig.
 * Use `create(LlmConfigSchema)` to create a new message.
 */
export const LlmConfigSchema: GenMessage<LlmConfig> = /*@__PURE__*/
  messageDesc(file_myncer_config, 5);

/**
 * @generated from message myncer.GeminiConfig
 */
export type GeminiConfig = Message<"myncer.GeminiConfig"> & {
  /**
   * @generated from field: string api_key = 1;
   */
  apiKey: string;
};

/**
 * Describes the message myncer.GeminiConfig.
 * Use `create(GeminiConfigSchema)` to create a new message.
 */
export const GeminiConfigSchema: GenMessage<GeminiConfig> = /*@__PURE__*/
  messageDesc(file_myncer_config, 6);

/**
 * @generated from message myncer.OpenAIConfig
 */
export type OpenAIConfig = Message<"myncer.OpenAIConfig"> & {
  /**
   * @generated from field: string api_key = 2;
   */
  apiKey: string;
};

/**
 * Describes the message myncer.OpenAIConfig.
 * Use `create(OpenAIConfigSchema)` to create a new message.
 */
export const OpenAIConfigSchema: GenMessage<OpenAIConfig> = /*@__PURE__*/
  messageDesc(file_myncer_config, 7);

/**
 * @generated from enum myncer.ServerMode
 */
export enum ServerMode {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROD = 1;
   */
  PROD = 1,

  /**
   * @generated from enum value: DEV = 2;
   */
  DEV = 2,
}

/**
 * Describes the enum myncer.ServerMode.
 */
export const ServerModeSchema: GenEnum<ServerMode> = /*@__PURE__*/
  enumDesc(file_myncer_config, 0);

/**
 * @generated from enum myncer.LlmProvider
 */
export enum LlmProvider {
  /**
   * @generated from enum value: LLM_PROVIDER_UNSPECIFIED = 0;
   */
  LLM_PROVIDER_UNSPECIFIED = 0,

  /**
   * @generated from enum value: GEMINI = 1;
   */
  GEMINI = 1,

  /**
   * @generated from enum value: OPENAI = 2;
   */
  OPENAI = 2,
}

/**
 * Describes the enum myncer.LlmProvider.
 */
export const LlmProviderSchema: GenEnum<LlmProvider> = /*@__PURE__*/
  enumDesc(file_myncer_config, 1);

