// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file myncer/sync.proto (package myncer, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { MusicSource } from "./datasource_pb";
import { file_myncer_datasource } from "./datasource_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file myncer/sync.proto.
 */
export const file_myncer_sync: GenFile = /*@__PURE__*/
  fileDesc("ChFteW5jZXIvc3luYy5wcm90bxIGbXluY2VyIr8BCgRTeW5jEgoKAmlkGAEgASgJEg8KB3VzZXJfaWQYAiABKAkSLgoKY3JlYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKgoMb25lX3dheV9zeW5jGAUgASgLMhIubXluY2VyLk9uZVdheVN5bmNIAEIOCgxzeW5jX3ZhcmlhbnQiUwoHU3luY1J1bhIPCgdzeW5jX2lkGAEgASgJEg4KBnJ1bl9pZBgCIAEoCRInCgtzeW5jX3N0YXR1cxgDIAEoDjISLm15bmNlci5TeW5jU3RhdHVzIncKCk9uZVdheVN5bmMSIwoGc291cmNlGAEgASgLMhMubXluY2VyLk11c2ljU291cmNlEigKC2Rlc3RpbmF0aW9uGAIgASgLMhMubXluY2VyLk11c2ljU291cmNlEhoKEm92ZXJ3cml0ZV9leGlzdGluZxgDIAEoCCJPChFDcmVhdGVTeW5jUmVxdWVzdBIqCgxvbmVfd2F5X3N5bmMYASABKAsyEi5teW5jZXIuT25lV2F5U3luY0gAQg4KDHN5bmNfdmFyaWFudCIwChJDcmVhdGVTeW5jUmVzcG9uc2USGgoEc3luYxgBIAEoCzIMLm15bmNlci5TeW5jIiQKEURlbGV0ZVN5bmNSZXF1ZXN0Eg8KB3N5bmNfaWQYASABKAkiJQoSRGVsZXRlU3luY1Jlc3BvbnNlEg8KB3N5bmNfaWQYASABKAkiEgoQTGlzdFN5bmNzUmVxdWVzdCIwChFMaXN0U3luY3NSZXNwb25zZRIbCgVzeW5jcxgBIAMoCzIMLm15bmNlci5TeW5jIiEKDlJ1blN5bmNSZXF1ZXN0Eg8KB3N5bmNfaWQYASABKAkiXQoPUnVuU3luY1Jlc3BvbnNlEg8KB3N5bmNfaWQYASABKAkSIgoGc3RhdHVzGAIgASgOMhIubXluY2VyLlN5bmNTdGF0dXMSFQoNZXJyb3JfbWVzc2FnZRgDIAEoCSqpAQoKU3luY1N0YXR1cxIbChdTWU5DX1NUQVRVU19VTlNQRUNJRklFRBAAEhcKE1NZTkNfU1RBVFVTX1BFTkRJTkcQARIXChNTWU5DX1NUQVRVU19SVU5OSU5HEAISGQoVU1lOQ19TVEFUVVNfQ09NUExFVEVEEAMSFgoSU1lOQ19TVEFUVVNfRkFJTEVEEAQSGQoVU1lOQ19TVEFUVVNfQ0FOQ0VMTEVEEAUylQIKC1N5bmNTZXJ2aWNlEkMKCkNyZWF0ZVN5bmMSGS5teW5jZXIuQ3JlYXRlU3luY1JlcXVlc3QaGi5teW5jZXIuQ3JlYXRlU3luY1Jlc3BvbnNlEkMKCkRlbGV0ZVN5bmMSGS5teW5jZXIuRGVsZXRlU3luY1JlcXVlc3QaGi5teW5jZXIuRGVsZXRlU3luY1Jlc3BvbnNlEkAKCUxpc3RTeW5jcxIYLm15bmNlci5MaXN0U3luY3NSZXF1ZXN0GhkubXluY2VyLkxpc3RTeW5jc1Jlc3BvbnNlEjoKB1J1blN5bmMSFi5teW5jZXIuUnVuU3luY1JlcXVlc3QaFy5teW5jZXIuUnVuU3luY1Jlc3BvbnNlQjNaMWdpdGh1Yi5jb20vaGFuc2JhbGEvbXluY2VyL3Byb3RvL215bmNlcjtteW5jZXJfcGJiBnByb3RvMw", [file_google_protobuf_timestamp, file_myncer_datasource]);

/**
 * @generated from message myncer.Sync
 */
export type Sync = Message<"myncer.Sync"> & {
  /**
   * google/uuid generated UUID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Myncer user id.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Metadata which is fetched from SQL (for it's ACID compliance).
   *
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * Holds the actual sync data.
   *
   * @generated from oneof myncer.Sync.sync_variant
   */
  syncVariant: {
    /**
     * @generated from field: myncer.OneWaySync one_way_sync = 5;
     */
    value: OneWaySync;
    case: "oneWaySync";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message myncer.Sync.
 * Use `create(SyncSchema)` to create a new message.
 */
export const SyncSchema: GenMessage<Sync> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 0);

/**
 * @generated from message myncer.SyncRun
 */
export type SyncRun = Message<"myncer.SyncRun"> & {
  /**
   * The ID of the sync that was run.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;

  /**
   * The run id of this sync.
   * This is expected to be randomly generated for each sync run.
   *
   * @generated from field: string run_id = 2;
   */
  runId: string;

  /**
   * The status of this sync run.
   *
   * @generated from field: myncer.SyncStatus sync_status = 3;
   */
  syncStatus: SyncStatus;
};

/**
 * Describes the message myncer.SyncRun.
 * Use `create(SyncRunSchema)` to create a new message.
 */
export const SyncRunSchema: GenMessage<SyncRun> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 1);

/**
 * Representative of source -> destination.
 *
 * @generated from message myncer.OneWaySync
 */
export type OneWaySync = Message<"myncer.OneWaySync"> & {
  /**
   * @generated from field: myncer.MusicSource source = 1;
   */
  source?: MusicSource;

  /**
   * @generated from field: myncer.MusicSource destination = 2;
   */
  destination?: MusicSource;

  /**
   * When true, it overwrites the destination songs.
   * If a song exists in source but not in destination, the song will be lost from destination.
   *
   * next: 4
   *
   * @generated from field: bool overwrite_existing = 3;
   */
  overwriteExisting: boolean;
};

/**
 * Describes the message myncer.OneWaySync.
 * Use `create(OneWaySyncSchema)` to create a new message.
 */
export const OneWaySyncSchema: GenMessage<OneWaySync> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 2);

/**
 * @generated from message myncer.CreateSyncRequest
 */
export type CreateSyncRequest = Message<"myncer.CreateSyncRequest"> & {
  /**
   * The sync to create.
   *
   * @generated from oneof myncer.CreateSyncRequest.sync_variant
   */
  syncVariant: {
    /**
     * @generated from field: myncer.OneWaySync one_way_sync = 1;
     */
    value: OneWaySync;
    case: "oneWaySync";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message myncer.CreateSyncRequest.
 * Use `create(CreateSyncRequestSchema)` to create a new message.
 */
export const CreateSyncRequestSchema: GenMessage<CreateSyncRequest> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 3);

/**
 * @generated from message myncer.CreateSyncResponse
 */
export type CreateSyncResponse = Message<"myncer.CreateSyncResponse"> & {
  /**
   * The created sync.
   *
   * @generated from field: myncer.Sync sync = 1;
   */
  sync?: Sync;
};

/**
 * Describes the message myncer.CreateSyncResponse.
 * Use `create(CreateSyncResponseSchema)` to create a new message.
 */
export const CreateSyncResponseSchema: GenMessage<CreateSyncResponse> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 4);

/**
 * @generated from message myncer.DeleteSyncRequest
 */
export type DeleteSyncRequest = Message<"myncer.DeleteSyncRequest"> & {
  /**
   * The ID of the sync to delete.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;
};

/**
 * Describes the message myncer.DeleteSyncRequest.
 * Use `create(DeleteSyncRequestSchema)` to create a new message.
 */
export const DeleteSyncRequestSchema: GenMessage<DeleteSyncRequest> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 5);

/**
 * @generated from message myncer.DeleteSyncResponse
 */
export type DeleteSyncResponse = Message<"myncer.DeleteSyncResponse"> & {
  /**
   * The ID of the deleted sync.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;
};

/**
 * Describes the message myncer.DeleteSyncResponse.
 * Use `create(DeleteSyncResponseSchema)` to create a new message.
 */
export const DeleteSyncResponseSchema: GenMessage<DeleteSyncResponse> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 6);

/**
 * @generated from message myncer.ListSyncsRequest
 */
export type ListSyncsRequest = Message<"myncer.ListSyncsRequest"> & {
};

/**
 * Describes the message myncer.ListSyncsRequest.
 * Use `create(ListSyncsRequestSchema)` to create a new message.
 */
export const ListSyncsRequestSchema: GenMessage<ListSyncsRequest> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 7);

/**
 * @generated from message myncer.ListSyncsResponse
 */
export type ListSyncsResponse = Message<"myncer.ListSyncsResponse"> & {
  /**
   * List of syncs for the current user.
   *
   * @generated from field: repeated myncer.Sync syncs = 1;
   */
  syncs: Sync[];
};

/**
 * Describes the message myncer.ListSyncsResponse.
 * Use `create(ListSyncsResponseSchema)` to create a new message.
 */
export const ListSyncsResponseSchema: GenMessage<ListSyncsResponse> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 8);

/**
 * @generated from message myncer.RunSyncRequest
 */
export type RunSyncRequest = Message<"myncer.RunSyncRequest"> & {
  /**
   * The ID of the sync to run.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;
};

/**
 * Describes the message myncer.RunSyncRequest.
 * Use `create(RunSyncRequestSchema)` to create a new message.
 */
export const RunSyncRequestSchema: GenMessage<RunSyncRequest> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 9);

/**
 * @generated from message myncer.RunSyncResponse
 */
export type RunSyncResponse = Message<"myncer.RunSyncResponse"> & {
  /**
   * The ID of the sync that was run.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;

  /**
   * @generated from field: myncer.SyncStatus status = 2;
   */
  status: SyncStatus;

  /**
   * If the sync failed, this will contain the error message.
   *
   * @generated from field: string error_message = 3;
   */
  errorMessage: string;
};

/**
 * Describes the message myncer.RunSyncResponse.
 * Use `create(RunSyncResponseSchema)` to create a new message.
 */
export const RunSyncResponseSchema: GenMessage<RunSyncResponse> = /*@__PURE__*/
  messageDesc(file_myncer_sync, 10);

/**
 * @generated from enum myncer.SyncStatus
 */
export enum SyncStatus {
  /**
   * @generated from enum value: SYNC_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The sync is pending and has not started yet.
   *
   * @generated from enum value: SYNC_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * The sync is currently running.
   *
   * @generated from enum value: SYNC_STATUS_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The sync has completed successfully.
   *
   * @generated from enum value: SYNC_STATUS_COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * The sync has failed.
   *
   * @generated from enum value: SYNC_STATUS_FAILED = 4;
   */
  FAILED = 4,

  /**
   * The sync was cancelled.
   *
   * @generated from enum value: SYNC_STATUS_CANCELLED = 5;
   */
  CANCELLED = 5,
}

/**
 * Describes the enum myncer.SyncStatus.
 */
export const SyncStatusSchema: GenEnum<SyncStatus> = /*@__PURE__*/
  enumDesc(file_myncer_sync, 0);

/**
 * @generated from service myncer.SyncService
 */
export const SyncService: GenService<{
  /**
   * @generated from rpc myncer.SyncService.CreateSync
   */
  createSync: {
    methodKind: "unary";
    input: typeof CreateSyncRequestSchema;
    output: typeof CreateSyncResponseSchema;
  },
  /**
   * @generated from rpc myncer.SyncService.DeleteSync
   */
  deleteSync: {
    methodKind: "unary";
    input: typeof DeleteSyncRequestSchema;
    output: typeof DeleteSyncResponseSchema;
  },
  /**
   * @generated from rpc myncer.SyncService.ListSyncs
   */
  listSyncs: {
    methodKind: "unary";
    input: typeof ListSyncsRequestSchema;
    output: typeof ListSyncsResponseSchema;
  },
  /**
   * @generated from rpc myncer.SyncService.RunSync
   */
  runSync: {
    methodKind: "unary";
    input: typeof RunSyncRequestSchema;
    output: typeof RunSyncResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_myncer_sync, 0);

