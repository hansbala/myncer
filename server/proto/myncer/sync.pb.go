// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: myncer/sync.proto

package myncer_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sync struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// google/uuid generated UUID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Myncer user id.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Metadata which is fetched from SQL (for it's ACID compliance).
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Holds the actual sync data.
	//
	// Types that are valid to be assigned to SyncVariant:
	//
	//	*Sync_OneWaySync
	SyncVariant   isSync_SyncVariant `protobuf_oneof:"sync_variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sync) Reset() {
	*x = Sync{}
	mi := &file_myncer_sync_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sync) ProtoMessage() {}

func (x *Sync) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_sync_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sync.ProtoReflect.Descriptor instead.
func (*Sync) Descriptor() ([]byte, []int) {
	return file_myncer_sync_proto_rawDescGZIP(), []int{0}
}

func (x *Sync) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sync) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Sync) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Sync) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Sync) GetSyncVariant() isSync_SyncVariant {
	if x != nil {
		return x.SyncVariant
	}
	return nil
}

func (x *Sync) GetOneWaySync() *OneWaySync {
	if x != nil {
		if x, ok := x.SyncVariant.(*Sync_OneWaySync); ok {
			return x.OneWaySync
		}
	}
	return nil
}

type isSync_SyncVariant interface {
	isSync_SyncVariant()
}

type Sync_OneWaySync struct {
	OneWaySync *OneWaySync `protobuf:"bytes,5,opt,name=one_way_sync,json=oneWaySync,proto3,oneof"`
}

func (*Sync_OneWaySync) isSync_SyncVariant() {}

// Representative of source -> destination.
type OneWaySync struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Source      *MusicSource           `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination *MusicSource           `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// When true, it overwrites the destination songs.
	// If a song exists in source but not in destination, the song will be lost from destination.
	OverwriteExisting bool `protobuf:"varint,3,opt,name=overwrite_existing,json=overwriteExisting,proto3" json:"overwrite_existing,omitempty"` // next: 4
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OneWaySync) Reset() {
	*x = OneWaySync{}
	mi := &file_myncer_sync_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneWaySync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneWaySync) ProtoMessage() {}

func (x *OneWaySync) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_sync_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneWaySync.ProtoReflect.Descriptor instead.
func (*OneWaySync) Descriptor() ([]byte, []int) {
	return file_myncer_sync_proto_rawDescGZIP(), []int{1}
}

func (x *OneWaySync) GetSource() *MusicSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OneWaySync) GetDestination() *MusicSource {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *OneWaySync) GetOverwriteExisting() bool {
	if x != nil {
		return x.OverwriteExisting
	}
	return false
}

type MusicSource struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Datasource Datasource             `protobuf:"varint,1,opt,name=datasource,proto3,enum=myncer.Datasource" json:"datasource,omitempty"`
	// Unique, stable playlist identifier for the datasource.
	PlaylistId    string `protobuf:"bytes,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"` // next: 3
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MusicSource) Reset() {
	*x = MusicSource{}
	mi := &file_myncer_sync_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MusicSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicSource) ProtoMessage() {}

func (x *MusicSource) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_sync_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicSource.ProtoReflect.Descriptor instead.
func (*MusicSource) Descriptor() ([]byte, []int) {
	return file_myncer_sync_proto_rawDescGZIP(), []int{2}
}

func (x *MusicSource) GetDatasource() Datasource {
	if x != nil {
		return x.Datasource
	}
	return Datasource_DATASOURCE_UNSPECIFIED
}

func (x *MusicSource) GetPlaylistId() string {
	if x != nil {
		return x.PlaylistId
	}
	return ""
}

var File_myncer_sync_proto protoreflect.FileDescriptor

var file_myncer_sync_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x79,
	0x6e, 0x63, 0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x01, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65,
	0x57, 0x61, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x57, 0x61,
	0x79, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x57, 0x61, 0x79,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x0b, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x79, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x42, 0x33, 0x5a, 0x31, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x6e, 0x73, 0x62, 0x61,
	0x6c, 0x61, 0x2f, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x3b, 0x6d, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_myncer_sync_proto_rawDescOnce sync.Once
	file_myncer_sync_proto_rawDescData []byte
)

func file_myncer_sync_proto_rawDescGZIP() []byte {
	file_myncer_sync_proto_rawDescOnce.Do(func() {
		file_myncer_sync_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_myncer_sync_proto_rawDesc), len(file_myncer_sync_proto_rawDesc)))
	})
	return file_myncer_sync_proto_rawDescData
}

var file_myncer_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_myncer_sync_proto_goTypes = []any{
	(*Sync)(nil),                  // 0: myncer.Sync
	(*OneWaySync)(nil),            // 1: myncer.OneWaySync
	(*MusicSource)(nil),           // 2: myncer.MusicSource
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(Datasource)(0),               // 4: myncer.Datasource
}
var file_myncer_sync_proto_depIdxs = []int32{
	3, // 0: myncer.Sync.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: myncer.Sync.updated_at:type_name -> google.protobuf.Timestamp
	1, // 2: myncer.Sync.one_way_sync:type_name -> myncer.OneWaySync
	2, // 3: myncer.OneWaySync.source:type_name -> myncer.MusicSource
	2, // 4: myncer.OneWaySync.destination:type_name -> myncer.MusicSource
	4, // 5: myncer.MusicSource.datasource:type_name -> myncer.Datasource
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_myncer_sync_proto_init() }
func file_myncer_sync_proto_init() {
	if File_myncer_sync_proto != nil {
		return
	}
	file_myncer_datasource_proto_init()
	file_myncer_sync_proto_msgTypes[0].OneofWrappers = []any{
		(*Sync_OneWaySync)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_myncer_sync_proto_rawDesc), len(file_myncer_sync_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_myncer_sync_proto_goTypes,
		DependencyIndexes: file_myncer_sync_proto_depIdxs,
		MessageInfos:      file_myncer_sync_proto_msgTypes,
	}.Build()
	File_myncer_sync_proto = out.File
	file_myncer_sync_proto_goTypes = nil
	file_myncer_sync_proto_depIdxs = nil
}
