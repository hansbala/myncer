// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: myncer/sync.proto

package myncer_pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	myncer "github.com/hansbala/myncer/proto/myncer"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "myncer.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceCreateSyncProcedure is the fully-qualified name of the SyncService's CreateSync RPC.
	SyncServiceCreateSyncProcedure = "/myncer.SyncService/CreateSync"
	// SyncServiceDeleteSyncProcedure is the fully-qualified name of the SyncService's DeleteSync RPC.
	SyncServiceDeleteSyncProcedure = "/myncer.SyncService/DeleteSync"
	// SyncServiceListSyncsProcedure is the fully-qualified name of the SyncService's ListSyncs RPC.
	SyncServiceListSyncsProcedure = "/myncer.SyncService/ListSyncs"
	// SyncServiceRunSyncProcedure is the fully-qualified name of the SyncService's RunSync RPC.
	SyncServiceRunSyncProcedure = "/myncer.SyncService/RunSync"
)

// SyncServiceClient is a client for the myncer.SyncService service.
type SyncServiceClient interface {
	CreateSync(context.Context, *connect.Request[myncer.CreateSyncRequest]) (*connect.Response[myncer.CreateSyncResponse], error)
	DeleteSync(context.Context, *connect.Request[myncer.DeleteSyncRequest]) (*connect.Response[myncer.DeleteSyncResponse], error)
	ListSyncs(context.Context, *connect.Request[myncer.ListSyncsRequest]) (*connect.Response[myncer.ListSyncsResponse], error)
	RunSync(context.Context, *connect.Request[myncer.RunSyncRequest]) (*connect.Response[myncer.RunSyncResponse], error)
}

// NewSyncServiceClient constructs a client for the myncer.SyncService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	syncServiceMethods := myncer.File_myncer_sync_proto.Services().ByName("SyncService").Methods()
	return &syncServiceClient{
		createSync: connect.NewClient[myncer.CreateSyncRequest, myncer.CreateSyncResponse](
			httpClient,
			baseURL+SyncServiceCreateSyncProcedure,
			connect.WithSchema(syncServiceMethods.ByName("CreateSync")),
			connect.WithClientOptions(opts...),
		),
		deleteSync: connect.NewClient[myncer.DeleteSyncRequest, myncer.DeleteSyncResponse](
			httpClient,
			baseURL+SyncServiceDeleteSyncProcedure,
			connect.WithSchema(syncServiceMethods.ByName("DeleteSync")),
			connect.WithClientOptions(opts...),
		),
		listSyncs: connect.NewClient[myncer.ListSyncsRequest, myncer.ListSyncsResponse](
			httpClient,
			baseURL+SyncServiceListSyncsProcedure,
			connect.WithSchema(syncServiceMethods.ByName("ListSyncs")),
			connect.WithClientOptions(opts...),
		),
		runSync: connect.NewClient[myncer.RunSyncRequest, myncer.RunSyncResponse](
			httpClient,
			baseURL+SyncServiceRunSyncProcedure,
			connect.WithSchema(syncServiceMethods.ByName("RunSync")),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	createSync *connect.Client[myncer.CreateSyncRequest, myncer.CreateSyncResponse]
	deleteSync *connect.Client[myncer.DeleteSyncRequest, myncer.DeleteSyncResponse]
	listSyncs  *connect.Client[myncer.ListSyncsRequest, myncer.ListSyncsResponse]
	runSync    *connect.Client[myncer.RunSyncRequest, myncer.RunSyncResponse]
}

// CreateSync calls myncer.SyncService.CreateSync.
func (c *syncServiceClient) CreateSync(ctx context.Context, req *connect.Request[myncer.CreateSyncRequest]) (*connect.Response[myncer.CreateSyncResponse], error) {
	return c.createSync.CallUnary(ctx, req)
}

// DeleteSync calls myncer.SyncService.DeleteSync.
func (c *syncServiceClient) DeleteSync(ctx context.Context, req *connect.Request[myncer.DeleteSyncRequest]) (*connect.Response[myncer.DeleteSyncResponse], error) {
	return c.deleteSync.CallUnary(ctx, req)
}

// ListSyncs calls myncer.SyncService.ListSyncs.
func (c *syncServiceClient) ListSyncs(ctx context.Context, req *connect.Request[myncer.ListSyncsRequest]) (*connect.Response[myncer.ListSyncsResponse], error) {
	return c.listSyncs.CallUnary(ctx, req)
}

// RunSync calls myncer.SyncService.RunSync.
func (c *syncServiceClient) RunSync(ctx context.Context, req *connect.Request[myncer.RunSyncRequest]) (*connect.Response[myncer.RunSyncResponse], error) {
	return c.runSync.CallUnary(ctx, req)
}

// SyncServiceHandler is an implementation of the myncer.SyncService service.
type SyncServiceHandler interface {
	CreateSync(context.Context, *connect.Request[myncer.CreateSyncRequest]) (*connect.Response[myncer.CreateSyncResponse], error)
	DeleteSync(context.Context, *connect.Request[myncer.DeleteSyncRequest]) (*connect.Response[myncer.DeleteSyncResponse], error)
	ListSyncs(context.Context, *connect.Request[myncer.ListSyncsRequest]) (*connect.Response[myncer.ListSyncsResponse], error)
	RunSync(context.Context, *connect.Request[myncer.RunSyncRequest]) (*connect.Response[myncer.RunSyncResponse], error)
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceMethods := myncer.File_myncer_sync_proto.Services().ByName("SyncService").Methods()
	syncServiceCreateSyncHandler := connect.NewUnaryHandler(
		SyncServiceCreateSyncProcedure,
		svc.CreateSync,
		connect.WithSchema(syncServiceMethods.ByName("CreateSync")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceDeleteSyncHandler := connect.NewUnaryHandler(
		SyncServiceDeleteSyncProcedure,
		svc.DeleteSync,
		connect.WithSchema(syncServiceMethods.ByName("DeleteSync")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceListSyncsHandler := connect.NewUnaryHandler(
		SyncServiceListSyncsProcedure,
		svc.ListSyncs,
		connect.WithSchema(syncServiceMethods.ByName("ListSyncs")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceRunSyncHandler := connect.NewUnaryHandler(
		SyncServiceRunSyncProcedure,
		svc.RunSync,
		connect.WithSchema(syncServiceMethods.ByName("RunSync")),
		connect.WithHandlerOptions(opts...),
	)
	return "/myncer.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceCreateSyncProcedure:
			syncServiceCreateSyncHandler.ServeHTTP(w, r)
		case SyncServiceDeleteSyncProcedure:
			syncServiceDeleteSyncHandler.ServeHTTP(w, r)
		case SyncServiceListSyncsProcedure:
			syncServiceListSyncsHandler.ServeHTTP(w, r)
		case SyncServiceRunSyncProcedure:
			syncServiceRunSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) CreateSync(context.Context, *connect.Request[myncer.CreateSyncRequest]) (*connect.Response[myncer.CreateSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.SyncService.CreateSync is not implemented"))
}

func (UnimplementedSyncServiceHandler) DeleteSync(context.Context, *connect.Request[myncer.DeleteSyncRequest]) (*connect.Response[myncer.DeleteSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.SyncService.DeleteSync is not implemented"))
}

func (UnimplementedSyncServiceHandler) ListSyncs(context.Context, *connect.Request[myncer.ListSyncsRequest]) (*connect.Response[myncer.ListSyncsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.SyncService.ListSyncs is not implemented"))
}

func (UnimplementedSyncServiceHandler) RunSync(context.Context, *connect.Request[myncer.RunSyncRequest]) (*connect.Response[myncer.RunSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.SyncService.RunSync is not implemented"))
}
