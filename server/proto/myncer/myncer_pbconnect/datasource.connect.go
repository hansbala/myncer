// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: myncer/datasource.proto

package myncer_pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	myncer "github.com/hansbala/myncer/proto/myncer"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatasourceServiceName is the fully-qualified name of the DatasourceService service.
	DatasourceServiceName = "myncer.DatasourceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatasourceServiceExchangeOAuthCodeProcedure is the fully-qualified name of the
	// DatasourceService's ExchangeOAuthCode RPC.
	DatasourceServiceExchangeOAuthCodeProcedure = "/myncer.DatasourceService/ExchangeOAuthCode"
	// DatasourceServiceListDatasourcesProcedure is the fully-qualified name of the DatasourceService's
	// ListDatasources RPC.
	DatasourceServiceListDatasourcesProcedure = "/myncer.DatasourceService/ListDatasources"
	// DatasourceServiceListPlaylistsProcedure is the fully-qualified name of the DatasourceService's
	// ListPlaylists RPC.
	DatasourceServiceListPlaylistsProcedure = "/myncer.DatasourceService/ListPlaylists"
	// DatasourceServiceGetPlaylistDetailsProcedure is the fully-qualified name of the
	// DatasourceService's GetPlaylistDetails RPC.
	DatasourceServiceGetPlaylistDetailsProcedure = "/myncer.DatasourceService/GetPlaylistDetails"
)

// DatasourceServiceClient is a client for the myncer.DatasourceService service.
type DatasourceServiceClient interface {
	ExchangeOAuthCode(context.Context, *connect.Request[myncer.ExchangeOAuthCodeRequest]) (*connect.Response[myncer.ExchangeOAuthCodeResponse], error)
	ListDatasources(context.Context, *connect.Request[myncer.ListDatasourcesRequest]) (*connect.Response[myncer.ListDatasourcesResponse], error)
	ListPlaylists(context.Context, *connect.Request[myncer.ListPlaylistsRequest]) (*connect.Response[myncer.ListPlaylistsResponse], error)
	GetPlaylistDetails(context.Context, *connect.Request[myncer.GetPlaylistDetailsRequest]) (*connect.Response[myncer.GetPlaylistDetailsResponse], error)
}

// NewDatasourceServiceClient constructs a client for the myncer.DatasourceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatasourceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatasourceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	datasourceServiceMethods := myncer.File_myncer_datasource_proto.Services().ByName("DatasourceService").Methods()
	return &datasourceServiceClient{
		exchangeOAuthCode: connect.NewClient[myncer.ExchangeOAuthCodeRequest, myncer.ExchangeOAuthCodeResponse](
			httpClient,
			baseURL+DatasourceServiceExchangeOAuthCodeProcedure,
			connect.WithSchema(datasourceServiceMethods.ByName("ExchangeOAuthCode")),
			connect.WithClientOptions(opts...),
		),
		listDatasources: connect.NewClient[myncer.ListDatasourcesRequest, myncer.ListDatasourcesResponse](
			httpClient,
			baseURL+DatasourceServiceListDatasourcesProcedure,
			connect.WithSchema(datasourceServiceMethods.ByName("ListDatasources")),
			connect.WithClientOptions(opts...),
		),
		listPlaylists: connect.NewClient[myncer.ListPlaylistsRequest, myncer.ListPlaylistsResponse](
			httpClient,
			baseURL+DatasourceServiceListPlaylistsProcedure,
			connect.WithSchema(datasourceServiceMethods.ByName("ListPlaylists")),
			connect.WithClientOptions(opts...),
		),
		getPlaylistDetails: connect.NewClient[myncer.GetPlaylistDetailsRequest, myncer.GetPlaylistDetailsResponse](
			httpClient,
			baseURL+DatasourceServiceGetPlaylistDetailsProcedure,
			connect.WithSchema(datasourceServiceMethods.ByName("GetPlaylistDetails")),
			connect.WithClientOptions(opts...),
		),
	}
}

// datasourceServiceClient implements DatasourceServiceClient.
type datasourceServiceClient struct {
	exchangeOAuthCode  *connect.Client[myncer.ExchangeOAuthCodeRequest, myncer.ExchangeOAuthCodeResponse]
	listDatasources    *connect.Client[myncer.ListDatasourcesRequest, myncer.ListDatasourcesResponse]
	listPlaylists      *connect.Client[myncer.ListPlaylistsRequest, myncer.ListPlaylistsResponse]
	getPlaylistDetails *connect.Client[myncer.GetPlaylistDetailsRequest, myncer.GetPlaylistDetailsResponse]
}

// ExchangeOAuthCode calls myncer.DatasourceService.ExchangeOAuthCode.
func (c *datasourceServiceClient) ExchangeOAuthCode(ctx context.Context, req *connect.Request[myncer.ExchangeOAuthCodeRequest]) (*connect.Response[myncer.ExchangeOAuthCodeResponse], error) {
	return c.exchangeOAuthCode.CallUnary(ctx, req)
}

// ListDatasources calls myncer.DatasourceService.ListDatasources.
func (c *datasourceServiceClient) ListDatasources(ctx context.Context, req *connect.Request[myncer.ListDatasourcesRequest]) (*connect.Response[myncer.ListDatasourcesResponse], error) {
	return c.listDatasources.CallUnary(ctx, req)
}

// ListPlaylists calls myncer.DatasourceService.ListPlaylists.
func (c *datasourceServiceClient) ListPlaylists(ctx context.Context, req *connect.Request[myncer.ListPlaylistsRequest]) (*connect.Response[myncer.ListPlaylistsResponse], error) {
	return c.listPlaylists.CallUnary(ctx, req)
}

// GetPlaylistDetails calls myncer.DatasourceService.GetPlaylistDetails.
func (c *datasourceServiceClient) GetPlaylistDetails(ctx context.Context, req *connect.Request[myncer.GetPlaylistDetailsRequest]) (*connect.Response[myncer.GetPlaylistDetailsResponse], error) {
	return c.getPlaylistDetails.CallUnary(ctx, req)
}

// DatasourceServiceHandler is an implementation of the myncer.DatasourceService service.
type DatasourceServiceHandler interface {
	ExchangeOAuthCode(context.Context, *connect.Request[myncer.ExchangeOAuthCodeRequest]) (*connect.Response[myncer.ExchangeOAuthCodeResponse], error)
	ListDatasources(context.Context, *connect.Request[myncer.ListDatasourcesRequest]) (*connect.Response[myncer.ListDatasourcesResponse], error)
	ListPlaylists(context.Context, *connect.Request[myncer.ListPlaylistsRequest]) (*connect.Response[myncer.ListPlaylistsResponse], error)
	GetPlaylistDetails(context.Context, *connect.Request[myncer.GetPlaylistDetailsRequest]) (*connect.Response[myncer.GetPlaylistDetailsResponse], error)
}

// NewDatasourceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatasourceServiceHandler(svc DatasourceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	datasourceServiceMethods := myncer.File_myncer_datasource_proto.Services().ByName("DatasourceService").Methods()
	datasourceServiceExchangeOAuthCodeHandler := connect.NewUnaryHandler(
		DatasourceServiceExchangeOAuthCodeProcedure,
		svc.ExchangeOAuthCode,
		connect.WithSchema(datasourceServiceMethods.ByName("ExchangeOAuthCode")),
		connect.WithHandlerOptions(opts...),
	)
	datasourceServiceListDatasourcesHandler := connect.NewUnaryHandler(
		DatasourceServiceListDatasourcesProcedure,
		svc.ListDatasources,
		connect.WithSchema(datasourceServiceMethods.ByName("ListDatasources")),
		connect.WithHandlerOptions(opts...),
	)
	datasourceServiceListPlaylistsHandler := connect.NewUnaryHandler(
		DatasourceServiceListPlaylistsProcedure,
		svc.ListPlaylists,
		connect.WithSchema(datasourceServiceMethods.ByName("ListPlaylists")),
		connect.WithHandlerOptions(opts...),
	)
	datasourceServiceGetPlaylistDetailsHandler := connect.NewUnaryHandler(
		DatasourceServiceGetPlaylistDetailsProcedure,
		svc.GetPlaylistDetails,
		connect.WithSchema(datasourceServiceMethods.ByName("GetPlaylistDetails")),
		connect.WithHandlerOptions(opts...),
	)
	return "/myncer.DatasourceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatasourceServiceExchangeOAuthCodeProcedure:
			datasourceServiceExchangeOAuthCodeHandler.ServeHTTP(w, r)
		case DatasourceServiceListDatasourcesProcedure:
			datasourceServiceListDatasourcesHandler.ServeHTTP(w, r)
		case DatasourceServiceListPlaylistsProcedure:
			datasourceServiceListPlaylistsHandler.ServeHTTP(w, r)
		case DatasourceServiceGetPlaylistDetailsProcedure:
			datasourceServiceGetPlaylistDetailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatasourceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatasourceServiceHandler struct{}

func (UnimplementedDatasourceServiceHandler) ExchangeOAuthCode(context.Context, *connect.Request[myncer.ExchangeOAuthCodeRequest]) (*connect.Response[myncer.ExchangeOAuthCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.DatasourceService.ExchangeOAuthCode is not implemented"))
}

func (UnimplementedDatasourceServiceHandler) ListDatasources(context.Context, *connect.Request[myncer.ListDatasourcesRequest]) (*connect.Response[myncer.ListDatasourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.DatasourceService.ListDatasources is not implemented"))
}

func (UnimplementedDatasourceServiceHandler) ListPlaylists(context.Context, *connect.Request[myncer.ListPlaylistsRequest]) (*connect.Response[myncer.ListPlaylistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.DatasourceService.ListPlaylists is not implemented"))
}

func (UnimplementedDatasourceServiceHandler) GetPlaylistDetails(context.Context, *connect.Request[myncer.GetPlaylistDetailsRequest]) (*connect.Response[myncer.GetPlaylistDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("myncer.DatasourceService.GetPlaylistDetails is not implemented"))
}
