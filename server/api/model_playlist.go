/*
Myncer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Playlist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Playlist{}

// Playlist struct for Playlist
type Playlist struct {
	Datasource Datasource `json:"datasource"`
	// Unique, stable playlist identifier for the datasource.
	PlaylistId string `json:"playlistId"`
	// Name of the playlist.
	Name *string `json:"name,omitempty"`
	// Description of the playlist.
	Description *string `json:"description,omitempty"`
	// URL to the playlist's cover image.
	ImageUrl *string `json:"imageUrl,omitempty"`
}

type _Playlist Playlist

// NewPlaylist instantiates a new Playlist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaylist(datasource Datasource, playlistId string) *Playlist {
	this := Playlist{}
	this.Datasource = datasource
	this.PlaylistId = playlistId
	return &this
}

// NewPlaylistWithDefaults instantiates a new Playlist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaylistWithDefaults() *Playlist {
	this := Playlist{}
	return &this
}

// GetDatasource returns the Datasource field value
func (o *Playlist) GetDatasource() Datasource {
	if o == nil {
		var ret Datasource
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *Playlist) GetDatasourceOk() (*Datasource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *Playlist) SetDatasource(v Datasource) {
	o.Datasource = v
}

// GetPlaylistId returns the PlaylistId field value
func (o *Playlist) GetPlaylistId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlaylistId
}

// GetPlaylistIdOk returns a tuple with the PlaylistId field value
// and a boolean to check if the value has been set.
func (o *Playlist) GetPlaylistIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaylistId, true
}

// SetPlaylistId sets field value
func (o *Playlist) SetPlaylistId(v string) {
	o.PlaylistId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Playlist) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Playlist) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Playlist) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Playlist) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Playlist) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Playlist) SetDescription(v string) {
	o.Description = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *Playlist) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *Playlist) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *Playlist) SetImageUrl(v string) {
	o.ImageUrl = &v
}

func (o Playlist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Playlist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datasource"] = o.Datasource
	toSerialize["playlistId"] = o.PlaylistId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	return toSerialize, nil
}

func (o *Playlist) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datasource",
		"playlistId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlaylist := _Playlist{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlaylist)

	if err != nil {
		return err
	}

	*o = Playlist(varPlaylist)

	return err
}

type NullablePlaylist struct {
	value *Playlist
	isSet bool
}

func (v NullablePlaylist) Get() *Playlist {
	return v.value
}

func (v *NullablePlaylist) Set(val *Playlist) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaylist) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaylist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaylist(val *Playlist) *NullablePlaylist {
	return &NullablePlaylist{value: val, isSet: true}
}

func (v NullablePlaylist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaylist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


