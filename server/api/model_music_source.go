/*
Myncer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MusicSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MusicSource{}

// MusicSource struct for MusicSource
type MusicSource struct {
	Datasource Datasource `json:"datasource"`
	// Unique, stable playlist identifier for the datasource.
	PlaylistId string `json:"playlistId"`
}

type _MusicSource MusicSource

// NewMusicSource instantiates a new MusicSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMusicSource(datasource Datasource, playlistId string) *MusicSource {
	this := MusicSource{}
	this.Datasource = datasource
	this.PlaylistId = playlistId
	return &this
}

// NewMusicSourceWithDefaults instantiates a new MusicSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMusicSourceWithDefaults() *MusicSource {
	this := MusicSource{}
	return &this
}

// GetDatasource returns the Datasource field value
func (o *MusicSource) GetDatasource() Datasource {
	if o == nil {
		var ret Datasource
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *MusicSource) GetDatasourceOk() (*Datasource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *MusicSource) SetDatasource(v Datasource) {
	o.Datasource = v
}

// GetPlaylistId returns the PlaylistId field value
func (o *MusicSource) GetPlaylistId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlaylistId
}

// GetPlaylistIdOk returns a tuple with the PlaylistId field value
// and a boolean to check if the value has been set.
func (o *MusicSource) GetPlaylistIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaylistId, true
}

// SetPlaylistId sets field value
func (o *MusicSource) SetPlaylistId(v string) {
	o.PlaylistId = v
}

func (o MusicSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MusicSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datasource"] = o.Datasource
	toSerialize["playlistId"] = o.PlaylistId
	return toSerialize, nil
}

func (o *MusicSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datasource",
		"playlistId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMusicSource := _MusicSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMusicSource)

	if err != nil {
		return err
	}

	*o = MusicSource(varMusicSource)

	return err
}

type NullableMusicSource struct {
	value *MusicSource
	isSet bool
}

func (v NullableMusicSource) Get() *MusicSource {
	return v.value
}

func (v *NullableMusicSource) Set(val *MusicSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMusicSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMusicSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMusicSource(val *MusicSource) *NullableMusicSource {
	return &NullableMusicSource{value: val, isSet: true}
}

func (v NullableMusicSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMusicSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


