/*
Myncer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// Datasource the model 'Datasource'
type Datasource string

// List of Datasource
const (
	SPOTIFY Datasource = "SPOTIFY"
	YOUTUBE Datasource = "YOUTUBE"
	DEEZER Datasource = "DEEZER"
	TIDAL Datasource = "TIDAL"
)

// All allowed values of Datasource enum
var AllowedDatasourceEnumValues = []Datasource{
	"SPOTIFY",
	"YOUTUBE",
	"DEEZER",
	"TIDAL",
}

func (v *Datasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Datasource(value)
	for _, existing := range AllowedDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Datasource", value)
}

// NewDatasourceFromValue returns a pointer to a valid Datasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatasourceFromValue(v string) (*Datasource, error) {
	ev := Datasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Datasource: valid values are %v", v, AllowedDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Datasource) IsValid() bool {
	for _, existing := range AllowedDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Datasource value
func (v Datasource) Ptr() *Datasource {
	return &v
}

type NullableDatasource struct {
	value *Datasource
	isSet bool
}

func (v NullableDatasource) Get() *Datasource {
	return v.value
}

func (v *NullableDatasource) Set(val *Datasource) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasource(val *Datasource) *NullableDatasource {
	return &NullableDatasource{value: val, isSet: true}
}

func (v NullableDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

