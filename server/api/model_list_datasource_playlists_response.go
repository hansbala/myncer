/*
Myncer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListDatasourcePlaylistsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListDatasourcePlaylistsResponse{}

// ListDatasourcePlaylistsResponse struct for ListDatasourcePlaylistsResponse
type ListDatasourcePlaylistsResponse struct {
	Playlists []Playlist `json:"playlists"`
}

type _ListDatasourcePlaylistsResponse ListDatasourcePlaylistsResponse

// NewListDatasourcePlaylistsResponse instantiates a new ListDatasourcePlaylistsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDatasourcePlaylistsResponse(playlists []Playlist) *ListDatasourcePlaylistsResponse {
	this := ListDatasourcePlaylistsResponse{}
	this.Playlists = playlists
	return &this
}

// NewListDatasourcePlaylistsResponseWithDefaults instantiates a new ListDatasourcePlaylistsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDatasourcePlaylistsResponseWithDefaults() *ListDatasourcePlaylistsResponse {
	this := ListDatasourcePlaylistsResponse{}
	return &this
}

// GetPlaylists returns the Playlists field value
func (o *ListDatasourcePlaylistsResponse) GetPlaylists() []Playlist {
	if o == nil {
		var ret []Playlist
		return ret
	}

	return o.Playlists
}

// GetPlaylistsOk returns a tuple with the Playlists field value
// and a boolean to check if the value has been set.
func (o *ListDatasourcePlaylistsResponse) GetPlaylistsOk() ([]Playlist, bool) {
	if o == nil {
		return nil, false
	}
	return o.Playlists, true
}

// SetPlaylists sets field value
func (o *ListDatasourcePlaylistsResponse) SetPlaylists(v []Playlist) {
	o.Playlists = v
}

func (o ListDatasourcePlaylistsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListDatasourcePlaylistsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["playlists"] = o.Playlists
	return toSerialize, nil
}

func (o *ListDatasourcePlaylistsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"playlists",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListDatasourcePlaylistsResponse := _ListDatasourcePlaylistsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListDatasourcePlaylistsResponse)

	if err != nil {
		return err
	}

	*o = ListDatasourcePlaylistsResponse(varListDatasourcePlaylistsResponse)

	return err
}

type NullableListDatasourcePlaylistsResponse struct {
	value *ListDatasourcePlaylistsResponse
	isSet bool
}

func (v NullableListDatasourcePlaylistsResponse) Get() *ListDatasourcePlaylistsResponse {
	return v.value
}

func (v *NullableListDatasourcePlaylistsResponse) Set(val *ListDatasourcePlaylistsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDatasourcePlaylistsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDatasourcePlaylistsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDatasourcePlaylistsResponse(val *ListDatasourcePlaylistsResponse) *NullableListDatasourcePlaylistsResponse {
	return &NullableListDatasourcePlaylistsResponse{value: val, isSet: true}
}

func (v NullableListDatasourcePlaylistsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDatasourcePlaylistsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


