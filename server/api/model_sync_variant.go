/*
Myncer API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SyncVariant The variant type of the sync.
type SyncVariant string

// List of SyncVariant
const (
	ONE_WAY SyncVariant = "ONE_WAY"
	MERGE SyncVariant = "MERGE"
)

// All allowed values of SyncVariant enum
var AllowedSyncVariantEnumValues = []SyncVariant{
	"ONE_WAY",
	"MERGE",
}

func (v *SyncVariant) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyncVariant(value)
	for _, existing := range AllowedSyncVariantEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyncVariant", value)
}

// NewSyncVariantFromValue returns a pointer to a valid SyncVariant
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSyncVariantFromValue(v string) (*SyncVariant, error) {
	ev := SyncVariant(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SyncVariant: valid values are %v", v, AllowedSyncVariantEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SyncVariant) IsValid() bool {
	for _, existing := range AllowedSyncVariantEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SyncVariant value
func (v SyncVariant) Ptr() *SyncVariant {
	return &v
}

type NullableSyncVariant struct {
	value *SyncVariant
	isSet bool
}

func (v NullableSyncVariant) Get() *SyncVariant {
	return v.value
}

func (v *NullableSyncVariant) Set(val *SyncVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncVariant(val *SyncVariant) *NullableSyncVariant {
	return &NullableSyncVariant{value: val, isSet: true}
}

func (v NullableSyncVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

