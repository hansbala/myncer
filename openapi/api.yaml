openapi: 3.0.3
info:
  title: Myncer API
  version: 1.0.0
servers:
  - url: https://myncer-api.hansbala.com/api/v1
    description: Production server
  - url: http://localhost:8080/api/v1
    description: Local dev server
paths:
  /users/create:
    post:
      summary: Create a user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /users/list:
    get:
      summary: List all users.
      operationId: listUsers
      responses:
        200:
          description: The list of all users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponse"
  /users/login:
    post:
      summary: Login the user based on credentials provided in the request.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
      responses:
        200:
          description: Login successful. Session cookie is set.
          headers:
            Set-Cookie:
              description: Authentication cookie.
              schema:
                type: string
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /users/logout:
    post:
      summary: Log out the currently authenticated user by clearing the session cookie.
      operationId: logoutUser
      responses:
        200:
          description: Logout successful. Authentication cookie cleared.
          headers:
            Set-Cookie:
              description: Expired authentication cookie to clear session.
              schema:
                type: string
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /users/edit:
    post:
      summary: Edits the current user.
      operationId: editUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUserRequest"
      responses:
        200:
          description: User edited successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /users/me:
    get:
      summary: Get the potentially authenticated user's details.
      operationId: getCurrentUser
      responses:
        200:
          description: Authenticated user's details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/{datasource}/exchange:
    post:
      summary: Exchange authorization code for access and refresh tokens
      description: |
        Exchanges an OAuth2 authorization code from a supported datasource for access and refresh tokens.
      operationId: exchangeOAuthCode
      parameters:
        - name: datasource
          in: path
          required: true
          description: The datasource to exchange the code for (e.g. 'spotify', 'youtube').
          schema:
            $ref: "#/components/schemas/Datasource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthExchangeRequest"
      responses:
        200:
          description: Token exchange successful
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /datasources/list:
    get:
      summary: Get list of connected datasources
      description: Get list of connected datasources of the current user.
      operationId: listConnectedDatasources
      responses:
        200:
          description: List of connection datasources.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDatasourcesResponse"
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          description: The plain text password of the user.
          type: string
    CreateUserResponse:
      type: object
      properties:
        id:
          description: Id of the created user.
          type: string
          example: abcd-1234
    ListUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          description: The unique ID of the user.
          type: string
          format: uuid
        firstName:
          description: First name of the user.
          type: string
        lastName:
          description: Last name of the user.
          type: string
        email:
          description: Email of the user.
          type: string
          format: email
    UserLoginRequest:
      type: object
      properties:
        email:
          description: Email of the user trying to login.
          type: string
          format: email
        password:
          description: Password of the user.
          type: string
    EditUserRequest:
      allOf:
        - $ref: "#/components/schemas/CreateUserRequest"
    Datasource:
      type: string
      enum:
        - SPOTIFY
        - YOUTUBE
        - DEEZER
        - TIDAL
    OAuthExchangeRequest:
      type: object
      properties:
        code:
          type: string
          description: The authorization code returned by the datasource.
        state:
          type: string
          description: Optional CSRF protection token returned from the datasource.
      required:
        - code
    ListDatasourcesResponse:
      type: object
      properties:
        connectedDatasources:
          type: array
          items:
            $ref: "#/components/schemas/Datasource"
